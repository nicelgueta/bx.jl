precompile(Tuple{typeof(Bx.include), String})
precompile(Tuple{typeof(Bx.algorithm.include), String})
precompile(Tuple{Type{Base.CanonicalIndexError}, String, Any})
precompile(Tuple{Type{Base.FlipArgs{Base.var"#112#113"}}, Function})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Missing, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Missing, Int64, Nothing})
precompile(Tuple{typeof(Base.afoldl), Function, Base.Missing})
precompile(Tuple{typeof(Parameters.with_kw), Expr, Module, Bool})
precompile(Tuple{typeof(Base.:(==)), Tuple{Expr, Int64}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Parameters.Lines}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Any, Any}, Symbol, Symbol})
precompile(Tuple{typeof(OrderedCollections.hashindex), Symbol, Int64})
precompile(Tuple{typeof(Base.setproperty!), OrderedCollections.OrderedDict{Any, Any}, Symbol, Int64})
precompile(Tuple{typeof(Parameters.decolon2), Symbol})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Any, Any}, Expr, Symbol})
precompile(Tuple{typeof(Base.prepend!), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(!=)), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Gumbo_jll.__init__)})
precompile(Tuple{typeof(Gumbo_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{typeof(URIs.__init__)})
precompile(Tuple{typeof(MbedTLS_jll.__init__)})
precompile(Tuple{typeof(MbedTLS.f_send), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.f_recv), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.__init__)})
precompile(Tuple{typeof(OpenSSL_jll.__init__)})
precompile(Tuple{typeof(OpenSSL_jll.find_artifact_dir)})
precompile(Tuple{typeof(Artifacts._artifact_str), Module, String, Base.SubString{String}, String, Base.Dict{String, Any}, Base.SHA1, Base.BinaryPlatforms.Platform, Any})
precompile(Tuple{typeof(OpenSSL.on_bio_stream_read), OpenSSL.BIO, Ptr{Int8}, Int32})
precompile(Tuple{typeof(OpenSSL.on_bio_stream_write), OpenSSL.BIO, Ptr{Int8}, Int32})
precompile(Tuple{typeof(OpenSSL.__init__)})
precompile(Tuple{typeof(Zlib_jll.__init__)})
precompile(Tuple{typeof(HTTP.Parsers.__init__)})
precompile(Tuple{typeof(HTTP.ConnectionPool.__init__)})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Int8}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Int8}}, Ptr{Nothing}})
precompile(Tuple{Type{OpenSSL.SSLContext}, OpenSSL.SSLMethod, String})
precompile(Tuple{typeof(HTTP.ConnectionRequest.__init__)})
precompile(Tuple{typeof(HTTP.MultiPartParsing.__init__)})
precompile(Tuple{typeof(Base.expand_ccallable), Nothing, Expr})
precompile(Tuple{typeof(Base.getindex), Array{Any, 1}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#374#375", Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, Base.var"#374#375"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.esc), Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.esc)}})
precompile(Tuple{typeof(Base._ccallable), Type, Type})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:init,), Tuple{typeof(HTTP.StreamRequest.streamlayer)}}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:init,), Tuple{typeof(HTTP.StreamRequest.streamlayer)}}, Symbol})
precompile(Tuple{Type{Base.FlipArgs{HTTP.var"#21#27"}}, Function})
precompile(Tuple{typeof(Base.afoldl), Base.BottomRF{Base.FlipArgs{HTTP.var"#21#27"}}, Function})
precompile(Tuple{typeof(Base._foldl_impl), Base.BottomRF{Base.FlipArgs{HTTP.var"#21#27"}}, Function, Tuple{}})
precompile(Tuple{typeof(Base.foldl_impl), Base.BottomRF{Base.FlipArgs{HTTP.var"#21#27"}}, Function, Tuple{}})
precompile(Tuple{typeof(Base.mapfoldr_impl), Function, Function, Function, Tuple{}})
precompile(Tuple{Base.var"##mapfoldr#261", Function, typeof(Base.mapfoldr), Function, Function, Tuple{}})
precompile(Tuple{Type{Base.FlipArgs{HTTP.var"#22#28"}}, Function})
precompile(Tuple{typeof(Base.reduce_empty), Base.FlipArgs{HTTP.var"#22#28"}, Type{Function}})
precompile(Tuple{typeof(Base.reduce_empty), Base.BottomRF{Base.FlipArgs{HTTP.var"#22#28"}}, Type{Function}})
precompile(Tuple{Type{Base.FlipArgs{HTTP.var"#24#30"}}, Function})
precompile(Tuple{typeof(Base.reduce_empty), Base.FlipArgs{HTTP.var"#24#30"}, Type{Union{}}})
precompile(Tuple{typeof(Base.reduce_empty), Base.BottomRF{Base.FlipArgs{HTTP.var"#24#30"}}, Type{Union{}}})
precompile(Tuple{typeof(Base.reduce_empty_iter), Base.BottomRF{Base.FlipArgs{HTTP.var"#24#30"}}, Tuple{}, Base.HasEltype})
precompile(Tuple{typeof(Base.reduce_empty_iter), Base.BottomRF{Base.FlipArgs{HTTP.var"#24#30"}}, Tuple{}})
precompile(Tuple{typeof(Base.foldl_impl), Base.BottomRF{Base.FlipArgs{HTTP.var"#24#30"}}, Base._InitialValue, Tuple{}})
precompile(Tuple{typeof(Base.mapfoldr_impl), Function, Function, Base._InitialValue, Tuple{}})
precompile(Tuple{Base.var"##mapfoldr#261", Base._InitialValue, typeof(Base.mapfoldr), Function, Function, Tuple{}})
precompile(Tuple{typeof(Base.mapfoldr), Function, Function, Tuple{}})
precompile(Tuple{Type{Base.FlipArgs{HTTP.var"#25#31"}}, Function})
precompile(Tuple{typeof(Base.reduce_empty), Base.FlipArgs{HTTP.var"#25#31"}, Type{Function}})
precompile(Tuple{typeof(Base.reduce_empty), Base.BottomRF{Base.FlipArgs{HTTP.var"#25#31"}}, Type{Function}})
precompile(Tuple{typeof(URIs._length_assert)})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:request,), Tuple{Nothing}}, Symbol})
precompile(Tuple{typeof(Base.:(âˆ˜)), Type, Type})
precompile(Tuple{typeof(Base.convert), Type{Type{AbstractTrees.PreOrderState{T} where T<:(AbstractTrees.TreeCursor{N, P} where P where N)}}, Type{AbstractTrees.PreOrderState{T} where T<:(AbstractTrees.TreeCursor{N, P} where P where N)}})
precompile(Tuple{typeof(Base.convert), Type{Type{AbstractTrees.TreeCursor{N, P} where P where N}}, Type{AbstractTrees.TreeCursor{N, P} where P where N}})
precompile(Tuple{typeof(Bx.real_main)})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.NullNode, Gumbo.CGumbo.Element, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:HTML}}, Array{Gumbo.HTMLNode, 1}, Gumbo.NullNode, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Base.in), Type, Array{DataType, 1}})
precompile(Tuple{typeof(Base.getproperty), Gumbo.CGumbo.Node{Gumbo.CGumbo.Element}, Symbol})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:HTML}, Gumbo.CGumbo.Element, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:head}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:HTML}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:head}, Gumbo.CGumbo.Element, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:meta}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:head}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:meta}})
precompile(Tuple{Type{Gumbo.HTMLElement{:title}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:head}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Base.getproperty), Gumbo.CGumbo.Node{Gumbo.CGumbo.Text}, Symbol})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:title}, Gumbo.CGumbo.Text, Bool})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:title}})
precompile(Tuple{Type{Gumbo.HTMLElement{:link}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:head}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:link}})
precompile(Tuple{Type{Gumbo.HTMLElement{:script}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:head}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:script}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:script}, Gumbo.CGumbo.Text, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:noscript}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:head}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:noscript}})
precompile(Tuple{Type{Gumbo.HTMLElement{:style}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:head}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:style}, Gumbo.CGumbo.Text, Bool})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:style}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:head}})
precompile(Tuple{Type{Gumbo.HTMLElement{:body}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:HTML}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:body}, Gumbo.CGumbo.Element, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:div}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:body}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:div}, Gumbo.CGumbo.Element, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:div}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:iframe}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:iframe}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}})
precompile(Tuple{Type{Gumbo.HTMLElement{:svg}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:svg}, Gumbo.CGumbo.Element, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:symbol}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:svg}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:symbol}, Gumbo.CGumbo.Element, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:path}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:symbol}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:path}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:symbol}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:svg}})
precompile(Tuple{Type{Gumbo.HTMLElement{:script}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:body}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:style}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:body}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:iframe}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:body}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:header}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:header}, Gumbo.CGumbo.Element, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:div}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:header}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:a}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:a}, Gumbo.CGumbo.Element, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:div}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:a}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:div}, Gumbo.CGumbo.Text, Bool})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:a}})
precompile(Tuple{Type{Gumbo.HTMLElement{:nav}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:nav}, Gumbo.CGumbo.Element, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:div}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:nav}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:svg}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:a}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:g}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:svg}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:g}, Gumbo.CGumbo.Element, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:path}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:g}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:g}})
precompile(Tuple{Type{Gumbo.HTMLElement{:button}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:button}, Gumbo.CGumbo.Element, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:div}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:button}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:use}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:svg}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:use}})
precompile(Tuple{Type{Gumbo.HTMLElement{:span}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:span}, Gumbo.CGumbo.Text, Bool})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:span}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:button}})
precompile(Tuple{Type{Gumbo.HTMLElement{:ul}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:ul}, Gumbo.CGumbo.Element, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:li}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:ul}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:li}, Gumbo.CGumbo.Element, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:a}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:li}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:a}, Gumbo.CGumbo.Text, Bool})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:li}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:ul}})
precompile(Tuple{Type{Gumbo.HTMLElement{:title}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:svg}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:nav}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:header}})
precompile(Tuple{Type{Gumbo.HTMLElement{:main}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:main}, Gumbo.CGumbo.Element, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:div}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:main}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:p}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:p}, Gumbo.CGumbo.Text, Bool})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:p}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:p}, Gumbo.CGumbo.Element, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{Symbol("bx-tag")}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:p}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{Symbol("bx-tag")}, Gumbo.CGumbo.Text, Bool})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{Symbol("bx-tag")}})
precompile(Tuple{Type{Gumbo.HTMLElement{:h1}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:h1}, Gumbo.CGumbo.Element, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:div}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:h1}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:address}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:address}, Gumbo.CGumbo.Text, Bool})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:address}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:h1}})
precompile(Tuple{Type{Gumbo.HTMLElement{:svg}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:button}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:section}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:section}, Gumbo.CGumbo.Element, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:h2}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:section}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:h2}, Gumbo.CGumbo.Text, Bool})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:h2}})
precompile(Tuple{Type{Gumbo.HTMLElement{:div}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:section}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:ol}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:ol}, Gumbo.CGumbo.Element, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:li}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:ol}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:div}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:li}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:picture}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:picture}, Gumbo.CGumbo.Element, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:source}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:picture}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:source}})
precompile(Tuple{Type{Gumbo.HTMLElement{:img}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:picture}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:img}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:picture}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:ol}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:span}, Gumbo.CGumbo.Element, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:svg}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:span}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:section}})
precompile(Tuple{Type{Gumbo.HTMLElement{:section}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:section}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:h3}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:section}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:h3}, Gumbo.CGumbo.Text, Bool})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:h3}})
precompile(Tuple{Type{Gumbo.HTMLElement{:img}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:span}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:button}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:ul}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:section}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:span}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:li}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:p}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:section}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:span}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:p}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:br}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:span}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:br}})
precompile(Tuple{Type{Gumbo.HTMLElement{:strong}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:span}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:strong}, Gumbo.CGumbo.Text, Bool})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:strong}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:button}, Gumbo.CGumbo.Text, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:h2}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:h3}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:button}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:section}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:a}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:section}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:span}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:a}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:h2}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:header}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:h3}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:header}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:circle}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:svg}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:circle}})
precompile(Tuple{Type{Gumbo.HTMLElement{:small}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:p}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:small}, Gumbo.CGumbo.Text, Bool})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:small}})
precompile(Tuple{Type{Gumbo.HTMLElement{:form}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:form}, Gumbo.CGumbo.Element, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:div}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:form}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:label}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:label}, Gumbo.CGumbo.Text, Bool})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:label}})
precompile(Tuple{Type{Gumbo.HTMLElement{:input}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:input}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:form}})
precompile(Tuple{Type{Gumbo.HTMLElement{:path}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:svg}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:strong}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:img}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:a}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:h4}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:h4}, Gumbo.CGumbo.Text, Bool})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:h4}})
precompile(Tuple{Type{Gumbo.HTMLElement{:ol}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:nav}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:main}})
precompile(Tuple{Type{Gumbo.HTMLElement{:aside}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:aside}, Gumbo.CGumbo.Element, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:div}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:aside}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:aside}})
precompile(Tuple{Type{Gumbo.HTMLElement{:footer}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{:footer}, Gumbo.CGumbo.Element, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:div}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:footer}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:footer}})
precompile(Tuple{Type{Gumbo.HTMLElement{:style}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{Symbol("next-route-announcer")}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:body}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Gumbo.gumbo_to_jl), Gumbo.HTMLElement{Symbol("next-route-announcer")}, Gumbo.CGumbo.Element, Bool})
precompile(Tuple{Type{Gumbo.HTMLElement{:p}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{Symbol("next-route-announcer")}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{Symbol("next-route-announcer")}})
precompile(Tuple{Type{Gumbo.HTMLElement{:link}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:body}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{:img}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:body}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{Symbol("cs-native-frame-holder")}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:body}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{Symbol("cs-native-frame-holder")}})
precompile(Tuple{Type{Gumbo.HTMLElement{:script}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:div}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{Type{Gumbo.HTMLElement{Symbol("grammarly-desktop-integration")}}, Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:body}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{Symbol("grammarly-desktop-integration")}})
precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:body}})
precompile(Tuple{typeof(Base.Libc.Libdl.dlsym), Ptr{Nothing}, Symbol})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{:HTML}, String})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{:head}, String, Int64})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{:meta}, String, Int64})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{:title}, String, Int64})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{:link}, String, Int64})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{:script}, String, Int64})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{:noscript}, String, Int64})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{:style}, String, Int64})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{:body}, String, Int64})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{:div}, String, Int64})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{:iframe}, String, Int64})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{:svg}, String, Int64})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{:symbol}, String, Int64})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{:path}, String, Int64})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{:header}, String, Int64})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{:a}, String, Int64})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{:nav}, String, Int64})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{:g}, String, Int64})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{:button}, String, Int64})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{:use}, String, Int64})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{:span}, String, Int64})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{:ul}, String, Int64})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{:li}, String, Int64})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{:main}, String, Int64})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{:p}, String, Int64})
precompile(Tuple{typeof(Bx.algorithm.searchBxTag), Gumbo.HTMLElement{Symbol("bx-tag")}, String, Int64})
precompile(Tuple{Type{NamedTuple{(:next, :nodeSymbol, :nodeAttrs), T} where T<:Tuple}, Tuple{Bx.algorithm.interfaces.BxRule, Symbol, Base.Dict{Any, Any}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:next, :nodeSymbol, :nodeAttrs), Tuple{Bx.algorithm.interfaces.BxRule, Symbol, Base.Dict{Any, Any}}}, Type{Bx.algorithm.interfaces.BxRule}})
precompile(Tuple{typeof(Base._foldl_impl), Base.BottomRF{Base.FlipArgs{HTTP.var"#22#28"}}, Function, Base.Iterators.Reverse{Array{Function, 1}}})
precompile(Tuple{HTTP.var"#22#28", typeof(HTTP.ExceptionRequest.exceptionlayer), Function})
precompile(Tuple{Base.BottomRF{Base.FlipArgs{HTTP.var"#22#28"}}, Function, Function})
precompile(Tuple{HTTP.var"#22#28", typeof(HTTP.TimeoutRequest.timeoutlayer), Function})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{HTTP.ConnectionRequest.var"#1#7"{HTTP.ConnectionRequest.var"#1#2#8"{HTTP.TimeoutRequest.var"#1#6"{HTTP.TimeoutRequest.var"#1#2#7"{HTTP.ExceptionRequest.var"#1#3"{HTTP.ExceptionRequest.var"#1#2#4"{typeof(HTTP.StreamRequest.streamlayer)}}}}}}}})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:init,), Tuple{HTTP.ConnectionRequest.var"#1#7"{HTTP.ConnectionRequest.var"#1#2#8"{HTTP.TimeoutRequest.var"#1#6"{HTTP.TimeoutRequest.var"#1#2#7"{HTTP.ExceptionRequest.var"#1#3"{HTTP.ExceptionRequest.var"#1#2#4"{typeof(HTTP.StreamRequest.streamlayer)}}}}}}}}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:init,), Tuple{HTTP.ConnectionRequest.var"#1#7"{HTTP.ConnectionRequest.var"#1#2#8"{HTTP.TimeoutRequest.var"#1#6"{HTTP.TimeoutRequest.var"#1#2#7"{HTTP.ExceptionRequest.var"#1#3"{HTTP.ExceptionRequest.var"#1#2#4"{typeof(HTTP.StreamRequest.streamlayer)}}}}}}}}, Symbol})
precompile(Tuple{Base.var"#foldr##kw", NamedTuple{(:init,), Tuple{HTTP.ConnectionRequest.var"#1#7"{HTTP.ConnectionRequest.var"#1#2#8"{HTTP.TimeoutRequest.var"#1#6"{HTTP.TimeoutRequest.var"#1#2#7"{HTTP.ExceptionRequest.var"#1#3"{HTTP.ExceptionRequest.var"#1#2#4"{typeof(HTTP.StreamRequest.streamlayer)}}}}}}}}, typeof(Base.foldr), Function, Tuple{}})
precompile(Tuple{typeof(Base.foldl_impl), Base.BottomRF{Base.FlipArgs{HTTP.var"#24#30"}}, Function, Tuple{}})
precompile(Tuple{Base.var"#foldr##kw", NamedTuple{(:init,), Tuple{HTTP.ConnectionRequest.var"#1#7"{HTTP.ConnectionRequest.var"#1#2#8"{HTTP.TimeoutRequest.var"#1#6"{HTTP.TimeoutRequest.var"#1#2#7"{HTTP.ExceptionRequest.var"#1#3"{HTTP.ExceptionRequest.var"#1#2#4"{typeof(HTTP.StreamRequest.streamlayer)}}}}}}}}, typeof(Base.foldr), Function, Array{Function, 1}})
precompile(Tuple{typeof(Base.mapfoldr_impl), Function, Function, Function, Array{Function, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Array{Function, 1}})
precompile(Tuple{typeof(Base._xfadjoint), Base.BottomRF{Base.FlipArgs{HTTP.var"#25#31"}}, Base.Generator{Array{Function, 1}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.foldl_impl), Base.BottomRF{Base.FlipArgs{HTTP.var"#25#31"}}, Function, Base.Iterators.Reverse{Array{Function, 1}}})
precompile(Tuple{HTTP.var"#25#31", typeof(HTTP.CanonicalizeRequest.canonicalizelayer), Function})
precompile(Tuple{Base.BottomRF{Base.FlipArgs{HTTP.var"#25#31"}}, Function, Function})
precompile(Tuple{HTTP.var"#25#31", typeof(HTTP.RetryRequest.retrylayer), Function})
precompile(Tuple{HTTP.var"#25#31", typeof(HTTP.CookieRequest.cookielayer), Function})
precompile(Tuple{HTTP.var"#25#31", typeof(HTTP.ContentTypeDetection.contenttypedetectionlayer), Function})
precompile(Tuple{HTTP.var"#25#31", typeof(HTTP.BasicAuthRequest.basicauthlayer), Function})
precompile(Tuple{HTTP.var"#25#31", typeof(HTTP.DefaultHeadersRequest.defaultheaderslayer), Function})
precompile(Tuple{HTTP.var"#25#31", typeof(HTTP.RedirectRequest.redirectlayer), Function})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:body,), Tuple{Nothing}}, Symbol})
precompile(Tuple{typeof(Base.something), Nothing, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:response_stream,), Tuple{Nothing}}, Symbol})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:response_stream,), Tuple{Nothing}}, Tuple{Symbol}})
precompile(Tuple{Base.var"##s82#216", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:response_stream,), Tuple{Nothing}}}})
precompile(Tuple{Type{UInt8}, UInt8})
precompile(Tuple{Base.Colon, UInt8, UInt8})
precompile(Tuple{typeof(Base.first), Base.UnitRange{UInt8}})
precompile(Tuple{typeof(Base.last), Base.UnitRange{UInt8}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:verbose,), Tuple{Int64}}}})
precompile(Tuple{Type{Ptr{UInt8}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:iofunction, :decompress, :verbose), Tuple{Nothing, Nothing, Int64}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:readtimeout, :iofunction, :decompress, :verbose), Tuple{Int64, Nothing, Nothing, Int64}}}})
precompile(Tuple{Type{NamedTuple{(:finalize,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:finalize,), Tuple{Bool}}, Symbol})
precompile(Tuple{Type{Sockets.IPv4}, Int64})
precompile(Tuple{typeof(HTTP.Messages.hasheader), Nothing, String})
precompile(Tuple{typeof(Base.argtail), Function, Function, Vararg{Function}})
precompile(Tuple{typeof(HTTP._length_assert)})
precompile(Tuple{typeof(HTTP.IOExtras.bytes), Array{UInt8, 1}})
precompile(Tuple{typeof(Base.convert), Type{Ptr{UInt8}}, Ptr{Nothing}})
precompile(Tuple{typeof(TranscodingStreams.checkbufsize), Int64})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:return_for_reuse,), Tuple{Base.Missing}}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:return_for_reuse,), Tuple{Base.Missing}}, Symbol})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Float64, Base.Val{-32}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:lt,), Tuple{HTTP.Cookies.var"#8#9"}}, Symbol})
precompile(Tuple{Type{Base.Order.Lt{Base.Order.var"#1#3"{HTTP.Cookies.var"#8#9", typeof(Base.identity)}}}, Function})
precompile(Tuple{typeof(Base.convert), Type{HTTP.Cookies.SameSite}, HTTP.Cookies.SameSite})
precompile(Tuple{Dates.var"##s884#36", Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("e, dd u yyyy HH:MM:SS"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}}})
precompile(Tuple{typeof(Base.first), Core.SimpleVector})
precompile(Tuple{typeof(Base.push!), Array{Char, 1}, Char})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Symbol, 1}, Symbol, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Dates.var"#37#38", Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Dates.var"#37#38"}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Dates.var"#37#38"}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Dates.AMPM, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Dates.var"#37#38"}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Symbol, 1}, Vararg{Any}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}})
precompile(Tuple{Base.Iterators.var"#7#8"{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.HasLength, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.HasShape{1}, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.IteratorSize, 1}}})
precompile(Tuple{Type{Base.IteratorSize}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Base.HasLength})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Expr, 1}})
precompile(Tuple{typeof(Base.map), Base.Iterators.var"#5#6", Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.setindex!), Array{Expr, 1}, Expr, Int64})
precompile(Tuple{typeof(Base.map), typeof(tuple), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{Dates.var"##s885#33", Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("e, dd u yyyy HH:MM:SS"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Type, 1}, Dates.var"#34#35"}, Int64})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.map), Base.Iterators.var"#5#6", Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.length), Core.SimpleVector})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("e, dd-uuu-yyyy HH:MM:SS G\MT"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{String, 4}}}}})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("e, dd-uuu-yyyy HH:MM:SS G\MT"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{String, 4}}}}})
precompile(Tuple{Type{NamedTuple{(:head, :tail), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:head, :tail), Tuple{Int64, Int64}}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Dates.DateTime}, Dates.DateTime})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{HTTP.var"##request#33", Array{Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}, Nothing, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), HTTP.MessageRequest.var"#1#3"{HTTP.MessageRequest.var"#1#2#4"{HTTP.DebugRequest.var"#1#4"{HTTP.DebugRequest.var"#1#2#5"{HTTP.RedirectRequest.var"#1#4"{HTTP.RedirectRequest.var"#1#2#5"{HTTP.DefaultHeadersRequest.var"#1#3"{HTTP.DefaultHeadersRequest.var"#1#2#4"{HTTP.BasicAuthRequest.var"#1#3"{HTTP.BasicAuthRequest.var"#1#2#4"{HTTP.ContentTypeDetection.var"#1#3"{HTTP.ContentTypeDetection.var"#1#2#4"{HTTP.CookieRequest.var"#1#5"{HTTP.CookieRequest.var"#1#2#6"{HTTP.RetryRequest.var"#1#4"{HTTP.RetryRequest.var"#1#2#5"{HTTP.CanonicalizeRequest.var"#1#3"{HTTP.CanonicalizeRequest.var"#1#2#4"{HTTP.ConnectionRequest.var"#1#7"{HTTP.ConnectionRequest.var"#1#2#8"{HTTP.TimeoutRequest.var"#1#6"{HTTP.TimeoutRequest.var"#1#2#7"{HTTP.ExceptionRequest.var"#1#3"{HTTP.ExceptionRequest.var"#1#2#4"{typeof(HTTP.StreamRequest.streamlayer)}}}}}}}}}}}}}}}}}}}}}}}}, String, String, Array{Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}, Nothing})
precompile(Tuple{typeof(HTTP.IOExtras.nbytes), Array{UInt8, 1}})
precompile(Tuple{typeof(Base.string), Int64})
precompile(Tuple{typeof(HTTP.Messages.setheader), Array{Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Pair{String, String}})
precompile(Tuple{HTTP.ConnectionRequest.var"#1#2#8"{HTTP.TimeoutRequest.var"#1#6"{HTTP.TimeoutRequest.var"#1#2#7"{HTTP.ExceptionRequest.var"#1#3"{HTTP.ExceptionRequest.var"#1#2#4"{typeof(HTTP.StreamRequest.streamlayer)}}}}}, Nothing, Type, Type, Int64, Base.Pairs{Symbol, Union{Nothing, Int64}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:iofunction, :decompress, :verbose), Tuple{Nothing, Nothing, Int64}}}, HTTP.ConnectionRequest.var"#1#7"{HTTP.ConnectionRequest.var"#1#2#8"{HTTP.TimeoutRequest.var"#1#6"{HTTP.TimeoutRequest.var"#1#2#7"{HTTP.ExceptionRequest.var"#1#3"{HTTP.ExceptionRequest.var"#1#2#4"{typeof(HTTP.StreamRequest.streamlayer)}}}}}}, HTTP.Messages.Request})
precompile(Tuple{typeof(Base.hash), Tuple{Bool}, UInt64})
precompile(Tuple{typeof(Sockets.uv_getaddrinfocb), Ptr{Nothing}, Int32, Ptr{Nothing}})
precompile(Tuple{HTTP.ConnectionPool.var"#newconnection##kw", NamedTuple{(:readtimeout, :iofunction, :decompress, :verbose), Tuple{Int64, Nothing, Nothing, Int64}}, typeof(HTTP.ConnectionPool.newconnection), Type{MbedTLS.SSLContext}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(Sockets.uv_connectcb), Ptr{Nothing}, Int32})
precompile(Tuple{typeof(Sockets.connect), Sockets.IPv4, UInt64})
precompile(Tuple{typeof(Base.setproperty!), Sockets.TCPSocket, Symbol, Int64})
precompile(Tuple{typeof(Base.notify), Base.GenericCondition{Base.Threads.SpinLock}})
precompile(Tuple{typeof(MbedTLS.f_rng), MbedTLS.CtrDrbg, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.isopen), Sockets.TCPSocket})
precompile(Tuple{typeof(Base.getproperty), Sockets.TCPSocket, Symbol})
precompile(Tuple{typeof(Base.unsafe_write), Sockets.TCPSocket, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.bytesavailable), Sockets.TCPSocket})
precompile(Tuple{typeof(Base.isreadable), Sockets.TCPSocket})
precompile(Tuple{typeof(Base.eof), Sockets.TCPSocket})
precompile(Tuple{typeof(Base.alloc_buf_hook), Sockets.TCPSocket, UInt64})
precompile(Tuple{Base.var"#readcb_specialized#677", Sockets.TCPSocket, Int64, UInt64})
precompile(Tuple{typeof(Base.min), UInt64, Int64})
precompile(Tuple{typeof(Base.unsafe_read), Sockets.TCPSocket, Ptr{UInt8}, UInt64})
precompile(Tuple{Type{Int32}, UInt64})
precompile(Tuple{typeof(Base.getproperty), URIs.URI, Symbol})
precompile(Tuple{Type{HTTP.Streams.Stream{M, S} where S<:IO where M<:HTTP.Messages.Message}, HTTP.Messages.Response, HTTP.ConnectionPool.Connection})
precompile(Tuple{typeof(Base.rem), UInt16, Type{UInt32}})
precompile(Tuple{typeof(Base.convert), Type{Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{HTTP.TimeoutRequest.var"#1#6##kw", NamedTuple{(:readtimeout, :iofunction, :decompress, :verbose), Tuple{Int64, Nothing, Nothing, Int64}}, HTTP.TimeoutRequest.var"#1#6"{HTTP.TimeoutRequest.var"#1#2#7"{HTTP.ExceptionRequest.var"#1#3"{HTTP.ExceptionRequest.var"#1#2#4"{typeof(HTTP.StreamRequest.streamlayer)}}}}, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Connection}})
precompile(Tuple{typeof(HTTP.Messages.hasheader), HTTP.Messages.Request, String})
precompile(Tuple{typeof(HTTP.Messages.ischunked), HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Messages.writeheaders), Base.GenericIOBuffer{Array{UInt8, 1}}, HTTP.Messages.Request})
precompile(Tuple{Type{Base.IOError}, String, Int64})
precompile(Tuple{typeof(Base.unsafe_write), MbedTLS.SSLContext, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.getproperty), HTTP.Messages.Request, Symbol})
precompile(Tuple{typeof(Base.eof), MbedTLS.SSLContext})
precompile(Tuple{HTTP.StreamRequest.var"#2#3"{HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Connection}, HTTP.ConnectionPool.Connection, HTTP.Messages.Request}})
precompile(Tuple{typeof(Base.write), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Connection}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.bytesavailable), MbedTLS.SSLContext})
precompile(Tuple{typeof(Base.unsafe_read), MbedTLS.SSLContext, Ptr{UInt8}, Int64})
precompile(Tuple{typeof(Base.readuntil), Base.GenericIOBuffer{Array{UInt8, 1}}, typeof(HTTP.Parsers.find_end_of_header)})
precompile(Tuple{Type{NamedTuple{(:transcode,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:transcode,), Tuple{Bool}}, Symbol})
precompile(Tuple{HTTP.StreamRequest.var"#4#5"{HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Connection}, TranscodingStreams.TranscodingStream{CodecZlib.GzipDecompressor, SimpleBufferStream.BufferStream}}})
precompile(Tuple{typeof(Base.readuntil), Base.GenericIOBuffer{Array{UInt8, 1}}, typeof(HTTP.Parsers.find_end_of_chunk_size)})
precompile(Tuple{typeof(Base.StringVector), Int64})
precompile(Tuple{typeof(Base.unsafe_read), HTTP.ConnectionPool.Connection, Ptr{UInt8}, Int64})
precompile(Tuple{typeof(Base.readuntil), Base.GenericIOBuffer{Array{UInt8, 1}}, typeof(HTTP.Parsers.find_end_of_trailer)})
precompile(Tuple{typeof(Base.length), Array{UInt8, 1}})
precompile(Tuple{typeof(Base.view), Array{UInt8, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.append!), Array{UInt8, 1}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{Base.var"#release##kw", NamedTuple{(:return_for_reuse,), Tuple{Bool}}, typeof(Base.release), HTTP.ConnectionPool.ConnectionPools.Pool{HTTP.ConnectionPool.Connection}, Tuple{DataType, String, String, Bool, Bool}, HTTP.ConnectionPool.Connection})
precompile(Tuple{typeof(Base.isequal), Tuple{DataType, String, String, Bool, Bool}, Tuple{DataType, Base.SubString{String}, Base.SubString{String}, Bool, Bool}})
precompile(Tuple{typeof(Base.isopen), MbedTLS.SSLContext})
precompile(Tuple{typeof(Base.getproperty), HTTP.Messages.Response, Symbol})
precompile(Tuple{typeof(Base.string), String, Dates.Delim{Char, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.Delim{Char, 1}})
precompile(Tuple{typeof(Base.repr), Char})
precompile(Tuple{Type{Base.SubString{T} where T<:AbstractString}, Base.SubString{String}, Int64, Int64})
precompile(Tuple{typeof(Base.repr), Base.SubString{String}})
precompile(Tuple{typeof(HTTP.Messages.isredirect), HTTP.Messages.Response})
precompile(Tuple{typeof(Bx.algorithm.executeRule), Bx.algorithm.interfaces.BxRule, Gumbo.HTMLElement{:HTML}, String})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{AbstractString, AbstractString}, Base.Dict{AbstractString, AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Gumbo.HTMLElement{T} where T}}, Gumbo.HTMLElement{:body}})
precompile(Tuple{typeof(Bx.algorithm.executeRule), Bx.algorithm.interfaces.BxRule, Gumbo.HTMLElement{:body}, String})
precompile(Tuple{typeof(Base.get), Base.Dict{AbstractString, AbstractString}, String, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Gumbo.HTMLElement{T} where T}}, Gumbo.HTMLElement{:div}})
precompile(Tuple{typeof(Bx.algorithm.executeRule), Bx.algorithm.interfaces.BxRule, Gumbo.HTMLElement{:div}, String})
precompile(Tuple{typeof(Bx.algorithm.executeRule), Bx.algorithm.interfaces.BxRule, Gumbo.HTMLElement{:main}, String})
precompile(Tuple{Type{AbstractTrees.ChildIndexing}, Type})
precompile(Tuple{Type{AbstractTrees.ParentLinks}, Type})
precompile(Tuple{Type{AbstractTrees.SiblingLinks}, Type})
precompile(Tuple{typeof(Gumbo.text), Gumbo.HTMLElement{:p}})
precompile(Tuple{typeof(Base.isnothing), Tuple{Gumbo.HTMLText, Int64}})
precompile(Tuple{Type{AbstractTrees.ImplicitCursor{N, P, S} where S where P where N}, AbstractTrees.ImplicitCursor{Gumbo.HTMLElement{:p}, Nothing, Any}, Gumbo.HTMLText, Nothing})
precompile(Tuple{typeof(AbstractTrees.instance), Type{AbstractTrees.PreOrderState{T} where T<:(AbstractTrees.TreeCursor{N, P} where P where N)}, AbstractTrees.ImplicitCursor{Gumbo.HTMLText, Gumbo.HTMLElement{:p}, Union{Nothing, Tuple{Gumbo.HTMLNode, Int64}}}})
precompile(Tuple{typeof(Base.iterate), AbstractTrees.PreOrderDFS{Gumbo.HTMLElement{:p}, AbstractTrees.var"#15#16"}, AbstractTrees.PreOrderState{AbstractTrees.ImplicitCursor{Gumbo.HTMLText, Gumbo.HTMLElement{:p}, Union{Nothing, Tuple{Gumbo.HTMLNode, Int64}}}}})
precompile(Tuple{typeof(AbstractTrees.isroot), AbstractTrees.ImplicitCursor{Gumbo.HTMLText, Gumbo.HTMLElement{:p}, Union{Nothing, Tuple{Gumbo.HTMLNode, Int64}}}})
precompile(Tuple{typeof(Base.call_composed), AbstractTrees.ImplicitCursor{Gumbo.HTMLElement{:p}, Nothing, Any}, typeof(Base.isnothing)})
precompile(Tuple{typeof(AbstractTrees.nextsibling), AbstractTrees.ImplicitCursor{Gumbo.HTMLText, Gumbo.HTMLElement{:p}, Union{Nothing, Tuple{Gumbo.HTMLNode, Int64}}}})
precompile(Tuple{typeof(AbstractTrees.parent), AbstractTrees.ImplicitCursor{Gumbo.HTMLText, Gumbo.HTMLElement{:p}, Union{Nothing, Tuple{Gumbo.HTMLNode, Int64}}}})
precompile(Tuple{typeof(AbstractTrees.isroot), AbstractTrees.ImplicitCursor{Gumbo.HTMLElement{:p}, Nothing, Any}})
precompile(Tuple{HTTP.ConnectionPool.var"#2#3"{HTTP.ConnectionPool.Connection}})
precompile(Tuple{MbedTLS.var"#21#23"{MbedTLS.SSLContext}, MbedTLS.SSLContext})
precompile(Tuple{MbedTLS.var"#15#16", MbedTLS.CRT})
precompile(Tuple{MbedTLS.var"#10#11", MbedTLS.CtrDrbg})
precompile(Tuple{MbedTLS.var"#8#9", MbedTLS.Entropy})
precompile(Tuple{MbedTLS.var"#17#19", MbedTLS.SSLConfig})
precompile(Tuple{typeof(Base.uvfinalize), Sockets.TCPSocket})
precompile(Tuple{typeof(OpenSSL.free), OpenSSL.SSLContext})
precompile(Tuple{typeof(OpenSSL.free), OpenSSL.BIOMethod})
